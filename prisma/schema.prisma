// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Quote {
  id                 String  @id @default(cuid())
  reference          String
  name               String
  contact            String
  email              String
  frameWidth         String?
  frameHeight        String?
  threshold          String?
  cill               String?
  leftDoors          String?
  rightDoors         String?
  openingDirection   String?
  trafficDoorSide    String?
  frameColor         String?
  addOnSize          String?
  addOnPositionTop   String?
  addOnPositionLeft  String?
  addOnPositionRight String?
  handleColor        String?
  internalShootbolt  String?
  glazing            String?
  blinds             String?
  trickleVents       String?
  delivery           String?
  content            String?
  published          Boolean @default(false)
  author             User?   @relation(fields: [authorId], references: [id])
  authorId           String?
  datePublished      String // @default(now()) doesnt work for british time - using logic in code using date-fns-tz - also saving as string as issue with BST if using DateTime
  dateModified       String // @updatedAt
  total              String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  posts         Quote[]
  accounts      Account[]
  sessions      Session[]
  brand         BrandEnum @default(All)
  role          RoleEnum  @default(User)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum BrandEnum {
  All
  SGG
  NOW
  UDO
}

enum RoleEnum {
  Admin
  Brand
  User
}
